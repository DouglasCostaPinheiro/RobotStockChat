@page
@model RoboStockChat.Pages.ChatroomModel
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = Model.Chatroom.Name;
}

<head>
    <style type="text/css">
        #chat2 .form-control {
            border-color: transparent;
        }

            #chat2 .form-control:focus {
                border-color: transparent;
                box-shadow: inset 0px 0px 0px 1px transparent;
            }

        .divider:after,
        .divider:before {
            content: "";
            flex: 1;
            height: 1px;
            background: #eee;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://unpkg.com/mqtt/dist/mqtt.min.js"></script>

    <script type="text/javascript">
        window.onload = (event) => {
            const clientId = 'mqttjs_' + Math.random().toString(16).substr(2, 8);
            const host = 'wss://broker.emqx.io:8084/mqtt';
            var chatTopic = "Application/@(Model.ApplicationId)/@(Model.Chatroom.Id)";

            const options = {
                keepalive: 60,
                clientId: clientId,
                protocolId: 'MQTT',
                protocolVersion: 4,
                clean: true,
                reconnectPeriod: 1000,
                connectTimeout: 30 * 1000,
                will: {
                    topic: 'WillMsg',
                    payload: 'Connection Closed abnormally..!',
                    qos: 0,
                    retain: false
                }
            }

            console.log('Connecting mqtt client');
            const client = mqtt.connect(host, options);

            client.on('connect',
                () => {
                    client.subscribe(chatTopic);
                });

            client.on("message",
                function(topic, payload) {
                    console.log([topic, payload].join(": "));
                    addMessageToScreen(JSON.parse(payload));
                    //client.end();
                });

            client.on('error',
                (err) => {
                    console.log('Connection error: ', err);
                    client.end();
                });

            client.on('reconnect',
                () => {
                    console.log('Reconnecting...');
                });

            const isMessageOwnedByUser = (message) => {
                return message.owner.id === "@(UserManager.GetUserId(User))";
            }

            const doesMessageNeedsANewArea = (message) => {
                if (document.querySelectorAll("#chat2 .card-body>div:last-child").length === 0)
                    return true;

                if (isMessageOwnedByUser(message) && document.querySelectorAll("#chat2 .card-body>div:last-child")[0].classList.contains("justify-content-end"))
                    return true;

                if (!isMessageOwnedByUser(message) && document.querySelectorAll("#chat2 .card-body>div:last-child")[0].classList.contains("justify-content-start"))
                    return true;

                return false;
            }

            const addMessageToScreen = (message) => {
                const body = document.querySelectorAll("#chat2 .card-body")[0];
                const lastMessage = document.querySelectorAll("#chat2 .card-body>div:last-child>div")[0];
                const formattedMessage = `[${message.owner.name}] ${message.message}`;

                if (isMessageOwnedByUser(message)) {
                    if (doesMessageNeedsANewArea(message)) {
                        body.insertAdjacentHTML("beforeend", `<div class="d-flex flex-row justify-content-start"><div><p class="small p-2 ms-3 mb-1 rounded-3" style="background-color: #f5f6f7;">${formattedMessage}</p></div></div>`);
                    } else {
                        lastMessage.insertAdjacentHTML("beforeend", `<p class="small p-2 ms-3 mb-1 rounded-3" style="background-color: #f5f6f7;">${formattedMessage}</p>`);
                    }
                } else {
                    if (doesMessageNeedsANewArea(message)) {
                        body.insertAdjacentHTML("beforeend", `<div class="d-flex flex-row justify-content-end"><div><p class="small p-2 ms-3 mb-1 rounded-3 bg-primary" style="background-color: #f5f6f7;">${formattedMessage}</p></div></div>`);
                    } else {
                        lastMessage.insertAdjacentHTML("beforeend", `<p class="small p-2 ms-3 mb-1 rounded-3 bg-primary">${formattedMessage}</p>`);
                    }
                }

                document.querySelectorAll("#chat2 .card-body>div:last-child")[0].scrollIntoView();
            }

            window.sendChatMessage = (messageString) => {
                const message = JSON.stringify({ timeStamp: new Date(), message: messageString, owner: { id: "@(UserManager.GetUserId(User))", name: "@(UserManager.GetUserName(User))" } });
                client.publish(chatTopic, message);
            }
        };

        function onMessageSent(e) {
            const messageString = document.querySelector('#chatInput').value;
            if (!messageString)
                return; //Not sending empty messages

            if (e.type === 'click' || (e.type === 'keypress' && e.keyCode === 13)) {
                sendChatMessage(messageString);
                document.querySelector('#chatInput').value = '';
            }
        }
    </script>

</head>

<section style="">
    <div class="container">

        <div class="row d-flex justify-content-center">
            <div class="col-md-12">

                <div class="card" id="chat2">
                    <div class="card-header d-flex justify-content-between align-items-center p-3">
                        <h5 class="mb-0">Chat</h5>
                    </div>
                    <div class="card-body" data-mdb-perfect-scrollbar="true" style="position: relative; height: 400px; overflow: auto">
                    </div>
                    <div class="card-footer text-muted d-flex justify-content-start align-items-center p-3">
                        <input type="text" class="form-control form-control-lg" id="chatInput"
                               placeholder="Type message" onkeypress="onMessageSent(event)">
                        <a class="ms-3" href="#!"><i class="fas fa-paper-plane" onclick="onMessageSent(event)"></i></a>
                    </div>
                </div>

            </div>
        </div>

    </div>
</section>